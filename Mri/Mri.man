.COMMENT SCCS_data: @(#) Mri.man 1.3 92/11/02 08:37:15
.TH "Mri" 1 "1 March 1992"
.SH NAME
Mri \- Motif Resource Interpreter
.SH SYNOPSIS
.B Mri [-rf \fIresourceFile\fP] [-name \fIappShellName\fP] [-tr] [...]
.SH DESCRIPTION
.I Mri
is a tool for developing Motif based user interfaces.  The look and
feel of the user interface can be specified in one or more X resource
files.
.SH OPTIONS
.I Mri
accepts all of the standard
.I Wcl
and
.I X
toolkit command line options (see
.I Wcl(3)
and
.I X(1))
.SH FILES
.IP /usr/lib/X11/app-defaults/Mri/*
Example resource files.
.SH "ENVIRONMENT VARIABLES"
.IP XUSERFILESEARCHPATH,XAPPLRESDIR,HOME,XENVIRONMENT
These are used by Xt to find resource files.
.SH "SEE ALSO"
.BI Ari (1),
.BI Cri (1),
.BI Ori (1),
.BI Wcl (3),
.BI WclCallbacks (1),
.BI WclActions (1),
.BI Xmp (3),
.BI X (1)
.SH BUGS
.LP
realizeCallback, destroyCallback, popupCallback, and popdownCallback
MUST NOT be specified using resource values for shell widgets derived
from Motif Vendor Shell in most releases of Motif.  Sorry, there is no
way I can see for Wcl to work around this bug in the list of resources
fetched by the Motif Vendor Shell Extension VendorExtInitialize()
procedure.
.LP
If you want to specify these resources, specifiy a wcCallback resource
and add the callbacks using WcAddCallbacks().
.LP
Explanation for Xt and Motif gurus with source code: Xt has fetched
these resources for the shell, and compiled the XtCallbackRec array
generated by WcCvtStringToCallback into the
InternalCallbackRec/XtCallbackRec "thang."  This happens in
Xt'Create.c'_XtCreate in R5.  _XtCreate then allows the widget to
initialize itself, calling CallInitialize().  This eventually invokes
the Motif Vendor Shell initialization, which invokes the Motif Vendor
Shell Extension initialization.  Here, Motif incorrectly fetches again
the above callback resources, applying the resources straight into the
"new" widget with its already compiled callback lists.  This causes the
compiled callback list storage to be overwritten with the original,
uncompiled form previously generated by WcCvtStringToCallback.  The
next XtAddCallback or XtCallAllCallbacks or XtSetValues on these
resources will (or should!) fail due to mis-interpreting the callback
list (the first element will again be an XtCallbackRec instead of an
InternalCallbackRec).  The fix is messy:  somehow treat the callback
resources as uniquely as Xt does everywhere else: fetch into a
different (local) Widget instead of new, and then traverse the list of
callbacks, invoking XtAddCallback( new, <callbackName>, cb->callback,
cb->closure ), and then free up that locally allocated dummy widget.
Yuck!
.SH AUTHOR
David E. Smyth (David.Smyth@SniAP.MchP.SNI.De)
